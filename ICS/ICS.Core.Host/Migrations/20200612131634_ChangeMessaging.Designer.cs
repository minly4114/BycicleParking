// <auto-generated />
using System;
using System.Net;
using ICS.Core.Host.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ICS.Core.Host.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20200612131634_ChangeMessaging")]
    partial class ChangeMessaging
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Client", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CredentialCardNumber")
                        .HasColumnType("character varying(18)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PastName")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("CredentialCardNumber")
                        .IsUnique();

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ClientServiceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("ClientUuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceGroupUuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceGroupUuid");

                    b.HasIndex("ClientUuid", "ServiceGroupUuid")
                        .IsUnique();

                    b.ToTable("ClientServiceGroup");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Cluster", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<IPAddress>("IPAddress")
                        .HasColumnType("inet");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupervisorUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("SupervisorUuid");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ClusterKeepAlive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid?>("ClusterUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClusterUuid");

                    b.ToTable("ClusterKeepAlives");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ClusterToken", b =>
                {
                    b.Property<Guid>("ClusterUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Value")
                        .HasColumnType("uuid");

                    b.HasKey("ClusterUuid");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("ClusterTokens");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.CredentialCard", b =>
                {
                    b.Property<string>("CardNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<string>("Rfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.HasKey("CardNumber");

                    b.HasIndex("Rfid")
                        .IsUnique();

                    b.ToTable("CredentialCards");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Dialog", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CraetedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("SessionUuid")
                        .HasColumnType("uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("SessionUuid");

                    b.ToTable("Dialogs");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.DialogParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("DialogUuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantUuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantUuid");

                    b.HasIndex("DialogUuid", "ParticipantUuid")
                        .IsUnique();

                    b.ToTable("DialogParticipant");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DialogUuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SenderUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DialogUuid");

                    b.HasIndex("SenderUuid");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Parking", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClusterUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("LocationLat")
                        .HasColumnType("real");

                    b.Property<float>("LocationLng")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("ClusterUuid");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ParkingConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaxNumberDay")
                        .HasColumnType("integer");

                    b.Property<int>("MaxNumberPlaces")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifyingUuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParkingUuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ReservationAllowed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModifyingUuid");

                    b.HasIndex("ParkingUuid");

                    b.ToTable("ParkingConfigurations");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ParkingKeepAlive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ParkingCondition")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParkingUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParkingUuid");

                    b.ToTable("ParkingKeepAlives");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ParkingPlace", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParkingUuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Serial")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ServiceGroupUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("ServiceGroupUuid");

                    b.HasIndex("ParkingUuid", "Level", "Serial")
                        .IsUnique();

                    b.ToTable("ParkingPlaces");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ParkingPlaceKeepAlive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ParkingCondition")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParkingPlaceUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParkingPlaceUuid");

                    b.ToTable("ParkingPlaceKeepAlives");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Participant", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Uuid");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Read", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("MessageId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UuidParticipant")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Read");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ServiceGroup", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UuidCreator")
                        .HasColumnType("uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("ServiceGroups");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.SessionChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ParkingPlaceKeepAliveId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionCondition")
                        .HasColumnType("integer");

                    b.Property<Guid>("SessionParkingUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParkingPlaceKeepAliveId");

                    b.HasIndex("SessionParkingUuid");

                    b.HasIndex("SessionCondition", "SessionParkingUuid")
                        .IsUnique();

                    b.ToTable("SessionChange");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.SessionParking", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndParking")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParkingPlaceUuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceGroupUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartParking")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("ParkingPlaceUuid");

                    b.HasIndex("ServiceGroupUuid");

                    b.ToTable("SessionParkings");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Worker", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PastName")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Client", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.CredentialCard", "CredentialCard")
                        .WithOne("Client")
                        .HasForeignKey("ICS.Core.Host.Data.Entities.Client", "CredentialCardNumber");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ClientServiceGroup", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Client", "Client")
                        .WithMany("ServiceGroups")
                        .HasForeignKey("ClientUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.Core.Host.Data.Entities.ServiceGroup", "ServiceGroup")
                        .WithMany("Clients")
                        .HasForeignKey("ServiceGroupUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Cluster", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Worker", "Supervisor")
                        .WithMany("ControlledСlusters")
                        .HasForeignKey("SupervisorUuid");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ClusterKeepAlive", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Cluster", "Cluster")
                        .WithMany("KeepAlives")
                        .HasForeignKey("ClusterUuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ClusterToken", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Cluster", "Cluster")
                        .WithOne("Token")
                        .HasForeignKey("ICS.Core.Host.Data.Entities.ClusterToken", "ClusterUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Dialog", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.SessionParking", "Session")
                        .WithMany("Dialogs")
                        .HasForeignKey("SessionUuid");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.DialogParticipant", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Dialog", "Dialog")
                        .WithMany("Participants")
                        .HasForeignKey("DialogUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.Core.Host.Data.Entities.Participant", "Participant")
                        .WithMany("Dialogs")
                        .HasForeignKey("ParticipantUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Message", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Dialog", "Dialog")
                        .WithMany("Messages")
                        .HasForeignKey("DialogUuid");

                    b.HasOne("ICS.Core.Host.Data.Entities.Participant", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderUuid");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Parking", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Cluster", "Cluster")
                        .WithMany("Parkings")
                        .HasForeignKey("ClusterUuid");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ParkingConfiguration", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Worker", "Modifying")
                        .WithMany("ParkingConfigurations")
                        .HasForeignKey("ModifyingUuid");

                    b.HasOne("ICS.Core.Host.Data.Entities.Parking", "Parking")
                        .WithMany("ParkingConfigurations")
                        .HasForeignKey("ParkingUuid");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ParkingKeepAlive", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Parking", "Parking")
                        .WithMany("ParkingKeepAlives")
                        .HasForeignKey("ParkingUuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ParkingPlace", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Parking", "Parking")
                        .WithMany("ParkingPlaces")
                        .HasForeignKey("ParkingUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICS.Core.Host.Data.Entities.ServiceGroup", "ServiceGroup")
                        .WithMany()
                        .HasForeignKey("ServiceGroupUuid");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.ParkingPlaceKeepAlive", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.ParkingPlace", "ParkingPlace")
                        .WithMany("ParkingPlaceKeepAlives")
                        .HasForeignKey("ParkingPlaceUuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.Read", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.Message", null)
                        .WithMany("Reads")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.SessionChange", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.ParkingPlaceKeepAlive", "ParkingPlaceKeepAlive")
                        .WithMany()
                        .HasForeignKey("ParkingPlaceKeepAliveId");

                    b.HasOne("ICS.Core.Host.Data.Entities.SessionParking", "SessionParking")
                        .WithMany("SessionChanges")
                        .HasForeignKey("SessionParkingUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICS.Core.Host.Data.Entities.SessionParking", b =>
                {
                    b.HasOne("ICS.Core.Host.Data.Entities.ParkingPlace", "ParkingPlace")
                        .WithMany("SessionParkings")
                        .HasForeignKey("ParkingPlaceUuid");

                    b.HasOne("ICS.Core.Host.Data.Entities.ServiceGroup", "ServiceGroup")
                        .WithMany("SessionParkings")
                        .HasForeignKey("ServiceGroupUuid");
                });
#pragma warning restore 612, 618
        }
    }
}
